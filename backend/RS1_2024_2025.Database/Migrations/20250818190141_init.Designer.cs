// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS1_2024_2025.Database;

#nullable disable

namespace RS1_2024_2025.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818190141_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("CanApproveRequests")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewLogs")
                        .HasColumnType("bit");

                    b.Property<int>("MyAppUserID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MyAppUserID");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CanApproveRequests = true,
                            CanViewLogs = true,
                            MyAppUserID = 1,
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Attendance", b =>
                {
                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.HasKey("LessonID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Algebra"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Geometrija"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Gramatika"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Pravopis"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Optika"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Kinematika"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Termodinamika"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Programiranje"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Baze podataka"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Web razvoj i dizajn"
                        },
                        new
                        {
                            ID = 11,
                            Name = "OOP"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Neuroanatomija"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Kosti"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Kotiranje"
                        },
                        new
                        {
                            ID = 15,
                            Name = "Tehničko pismo"
                        },
                        new
                        {
                            ID = 16,
                            Name = "Nacrtna geometrija"
                        },
                        new
                        {
                            ID = 17,
                            Name = "Trigonometrija"
                        },
                        new
                        {
                            ID = 18,
                            Name = "Genetika"
                        },
                        new
                        {
                            ID = 19,
                            Name = "Deklinacije i komparacije pridjeva"
                        },
                        new
                        {
                            ID = 20,
                            Name = "Latinske poslovice"
                        },
                        new
                        {
                            ID = 21,
                            Name = "Ohmov zakon i Kirhofova pravila"
                        },
                        new
                        {
                            ID = 22,
                            Name = "Strujni krugovi"
                        },
                        new
                        {
                            ID = 23,
                            Name = "Hemijske jednačine"
                        },
                        new
                        {
                            ID = 24,
                            Name = "Hemijske veze"
                        },
                        new
                        {
                            ID = 25,
                            Name = "Organska hemija"
                        },
                        new
                        {
                            ID = 26,
                            Name = "Brojni sistemi"
                        },
                        new
                        {
                            ID = 27,
                            Name = "Konverzacija"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Sarajevo",
                            PostalCode = "71000"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Tuzla",
                            PostalCode = "75000"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Zenica",
                            PostalCode = "72000"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Mostar",
                            PostalCode = "88000"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Bijeljina",
                            PostalCode = "76300"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Brčko",
                            PostalCode = "76100"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Livno",
                            PostalCode = "80200"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Doboj",
                            PostalCode = "74000"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Travnik",
                            PostalCode = "72290"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Bihać",
                            PostalCode = "77000"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Goražde",
                            PostalCode = "73000"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Prijedor",
                            PostalCode = "79101"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Banja Luka",
                            PostalCode = "78000"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TutorID");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Duration = 0,
                            EndTime = new DateTime(2025, 6, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 1,
                            StartTime = new DateTime(2025, 6, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 1,
                            SubjectID = 10,
                            TutorID = 1
                        },
                        new
                        {
                            ID = 2,
                            Duration = 0,
                            EndTime = new DateTime(2025, 6, 10, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 0,
                            StartTime = new DateTime(2025, 6, 10, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 2,
                            SubjectID = 1,
                            TutorID = 1
                        },
                        new
                        {
                            ID = 3,
                            Duration = 0,
                            EndTime = new DateTime(2025, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 1,
                            StartTime = new DateTime(2025, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 3,
                            SubjectID = 2,
                            TutorID = 2
                        },
                        new
                        {
                            ID = 4,
                            Duration = 0,
                            EndTime = new DateTime(2025, 7, 5, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 0,
                            StartTime = new DateTime(2025, 7, 5, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 4,
                            SubjectID = 21,
                            TutorID = 2
                        },
                        new
                        {
                            ID = 5,
                            Duration = 0,
                            EndTime = new DateTime(2025, 8, 12, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 1,
                            StartTime = new DateTime(2025, 8, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 5,
                            SubjectID = 7,
                            TutorID = 3
                        },
                        new
                        {
                            ID = 6,
                            Duration = 0,
                            EndTime = new DateTime(2025, 8, 12, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 0,
                            StartTime = new DateTime(2025, 8, 12, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 6,
                            SubjectID = 17,
                            TutorID = 3
                        },
                        new
                        {
                            ID = 7,
                            Duration = 0,
                            EndTime = new DateTime(2025, 9, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mode = 1,
                            StartTime = new DateTime(2025, 9, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentID = 7,
                            SubjectID = 12,
                            TutorID = 4
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Models.Auth.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Models.TutorSubjectCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TutorID", "SubjectID", "CategoryID")
                        .IsUnique()
                        .HasFilter("[CategoryID] IS NOT NULL");

                    b.ToTable("TutorSubjectCategories");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.MyAppUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("MyAppUsers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Age = 27,
                            CityId = 10,
                            Email = "admin.adminovic@example.com",
                            FirstName = "Admin",
                            Gender = "Muško",
                            LastName = "Adminovic",
                            Password = "admin123",
                            PhoneNumber = "060000104",
                            UserType = "Admin",
                            Username = "AdminAdmin"
                        },
                        new
                        {
                            ID = 2,
                            Age = 40,
                            CityId = 1,
                            Email = "liam.brown@example.com",
                            FirstName = "Liam",
                            Gender = "Muško",
                            LastName = "Brown",
                            Password = "liam123",
                            PhoneNumber = "060000102",
                            UserType = "Tutor",
                            Username = "liamTutor"
                        },
                        new
                        {
                            ID = 3,
                            Age = 29,
                            CityId = 1,
                            Email = "olivia.davis@example.com",
                            FirstName = "Olivia",
                            Gender = "Žensko",
                            LastName = "Davis",
                            Password = "olivia123",
                            PhoneNumber = "060000103",
                            UserType = "Tutor",
                            Username = "oliviaTutor"
                        },
                        new
                        {
                            ID = 4,
                            Age = 34,
                            CityId = 2,
                            Email = "mirza.omerovic@example.com",
                            FirstName = "Mirza",
                            Gender = "Muško",
                            LastName = "Omerović",
                            Password = "mirza123",
                            PhoneNumber = "062222201",
                            UserType = "Tutor",
                            Username = "mirzaProf"
                        },
                        new
                        {
                            ID = 5,
                            Age = 42,
                            CityId = 3,
                            Email = "sabina.delic@example.com",
                            FirstName = "Sabina",
                            Gender = "Žensko",
                            LastName = "Delić",
                            Password = "sabina123",
                            PhoneNumber = "062222202",
                            UserType = "Tutor",
                            Username = "sabinaProf"
                        },
                        new
                        {
                            ID = 6,
                            Age = 39,
                            CityId = 9,
                            Email = "edin.colic@example.com",
                            FirstName = "Edin",
                            Gender = "Muško",
                            LastName = "Čolić",
                            Password = "edin123",
                            PhoneNumber = "062222203",
                            UserType = "Tutor",
                            Username = "edinProf"
                        },
                        new
                        {
                            ID = 7,
                            Age = 7,
                            CityId = 2,
                            Email = "maida@gmail.com",
                            FirstName = "Maida",
                            Gender = "Žensko",
                            LastName = "Tucovic",
                            Password = "maida123",
                            PhoneNumber = "060000100",
                            UserType = "Student",
                            Username = "maida"
                        },
                        new
                        {
                            ID = 8,
                            Age = 10,
                            CityId = 9,
                            Email = "emma.johnson@example.com",
                            FirstName = "Emma",
                            Gender = "Žensko",
                            LastName = "Johnson",
                            Password = "emma123",
                            PhoneNumber = "060000101",
                            UserType = "Student",
                            Username = "emmaStudent"
                        },
                        new
                        {
                            ID = 9,
                            Age = 19,
                            CityId = 12,
                            Email = "ajla.hadzic@example.com",
                            FirstName = "Ajla",
                            Gender = "Žensko",
                            LastName = "Hadžić",
                            Password = "ajla123",
                            PhoneNumber = "061111101",
                            UserType = "Student",
                            Username = "ajlaStudent"
                        },
                        new
                        {
                            ID = 10,
                            Age = 17,
                            CityId = 7,
                            Email = "nedim.selimovic@example.com",
                            FirstName = "Nedim",
                            Gender = "Muško",
                            LastName = "Selimović",
                            Password = "nedim123",
                            PhoneNumber = "061111102",
                            UserType = "Student",
                            Username = "nedimStudent"
                        },
                        new
                        {
                            ID = 11,
                            Age = 15,
                            CityId = 8,
                            Email = "lamija.mehic@example.com",
                            FirstName = "Lamija",
                            Gender = "Žensko",
                            LastName = "Mehić",
                            Password = "lamija123",
                            PhoneNumber = "061111103",
                            UserType = "Student",
                            Username = "lamijaStudent"
                        },
                        new
                        {
                            ID = 12,
                            Age = 12,
                            CityId = 13,
                            Email = "adin.mujic@example.com",
                            FirstName = "Adin",
                            Gender = "Muško",
                            LastName = "Mujić",
                            Password = "adin123",
                            PhoneNumber = "061111104",
                            UserType = "Student",
                            Username = "adinStudent"
                        },
                        new
                        {
                            ID = 13,
                            Age = 7,
                            CityId = 11,
                            Email = "nejra.alihodzic@example.com",
                            FirstName = "Nejra",
                            Gender = "Žensko",
                            LastName = "Alihodžić",
                            Password = "nejra123",
                            PhoneNumber = "061111105",
                            UserType = "Student",
                            Username = "nejraStudent"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.MyAuthenticationToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyAppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MyAppUserId");

                    b.ToTable("MyAuthenticationTokens");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID")
                        .IsUnique();

                    b.HasIndex("StudentID");

                    b.HasIndex("TutorID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.ReservationPayment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("LessonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<decimal>("TutorExpencesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("TutorExpencesPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LessonID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TutorID");

                    b.ToTable("ReservationsPayments");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TutorID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyAppUserID")
                        .HasColumnType("int");

                    b.Property<string>("PreferredMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MyAppUserID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EducationLevel = 0,
                            Grade = "Drugi",
                            MyAppUserID = 7,
                            PreferredMode = "Online"
                        },
                        new
                        {
                            ID = 2,
                            EducationLevel = 0,
                            Grade = "Peti",
                            MyAppUserID = 8,
                            PreferredMode = "InClass"
                        },
                        new
                        {
                            ID = 3,
                            EducationLevel = 1,
                            Grade = "Četvrti",
                            MyAppUserID = 9,
                            PreferredMode = "InClass"
                        },
                        new
                        {
                            ID = 4,
                            EducationLevel = 1,
                            Grade = "Treći",
                            MyAppUserID = 10,
                            PreferredMode = "Online"
                        },
                        new
                        {
                            ID = 5,
                            EducationLevel = 1,
                            Grade = "Prvi",
                            MyAppUserID = 11,
                            PreferredMode = "Online"
                        },
                        new
                        {
                            ID = 6,
                            EducationLevel = 0,
                            Grade = "Sedmi",
                            MyAppUserID = 12,
                            PreferredMode = "Online"
                        },
                        new
                        {
                            ID = 7,
                            EducationLevel = 0,
                            Grade = "Drugi",
                            MyAppUserID = 13,
                            PreferredMode = "InClass"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.StudentSubject", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("StudentsSubjects");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Gramatika, pisanje i analiza književnih djela",
                            DifficultyLevel = "osnovna skola",
                            Name = "Bosanski jezik"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Osnovne vještine u govoru, čitanju i pisanju na engleskom jeziku",
                            DifficultyLevel = "osnovna skola",
                            Name = "Engleski jezik"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Razumijevanje osnovnih principa fizike u svakodnevnom životu",
                            DifficultyLevel = "osnovna skola",
                            Name = "Fizika"
                        },
                        new
                        {
                            ID = 4,
                            Description = "Proučavanje geografskih pojava i zemljopisnih karakteristika svijeta",
                            DifficultyLevel = "osnovna skola",
                            Name = "Geografija"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Osnovni koncepti hemijskih reakcija i svojstava materijala",
                            DifficultyLevel = "osnovna skola",
                            Name = "Hemija"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Učenje o važnim događajima i ličnostima kroz historiju",
                            DifficultyLevel = "osnovna skola",
                            Name = "Historija"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Osnovni koncepti brojeva, operacija i geometrije",
                            DifficultyLevel = "osnovna skola",
                            Name = "Matematika"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Osnovna saznanja o prirodi, društvu i svijetu",
                            DifficultyLevel = "osnovna skola",
                            Name = "Priroda i društvo"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Razvijanje kreativnosti kroz crtanje, slikanje i izražavanje",
                            DifficultyLevel = "osnovna skola",
                            Name = "Likovna kultura"
                        },
                        new
                        {
                            ID = 10,
                            Description = "Upoznavanje sa osnovama muzike, notama i muzičkim izrazom",
                            DifficultyLevel = "osnovna skola",
                            Name = "Muzicka kultura"
                        },
                        new
                        {
                            ID = 11,
                            Description = "Razvijanje tehničkih vještina i praktičnih sposobnosti",
                            DifficultyLevel = "osnovna skola",
                            Name = "Tehnička kultura"
                        },
                        new
                        {
                            ID = 12,
                            Description = "Osnove njemačkog jezika: govor, čitanje i pisanje",
                            DifficultyLevel = "osnovna skola",
                            Name = "Njemački jezik"
                        },
                        new
                        {
                            ID = 13,
                            Description = "Osnove turskog jezika: govor, čitanje i pisanje",
                            DifficultyLevel = "osnovna skola",
                            Name = "Turski jezik"
                        },
                        new
                        {
                            ID = 14,
                            Description = "Napredna fizika, strujni krugovi, sheme",
                            DifficultyLevel = "srednja skola",
                            Name = "Osnove elektrotehnike"
                        },
                        new
                        {
                            ID = 15,
                            Description = "Osnove ljudske građe tijela, kosti, mišići, anatomija nervnog sistema",
                            DifficultyLevel = "srednja skola",
                            Name = "Anatomija"
                        },
                        new
                        {
                            ID = 17,
                            Description = "Tehničko pismo, kotiranje, tlocrt, nacrt, bokocrt",
                            DifficultyLevel = "srednja skola",
                            Name = "Tehničko crtanje"
                        },
                        new
                        {
                            ID = 18,
                            Description = "Osnovni pojmovi u mikrobiologiji, imenovanje preparata, prepoznavanje mikrobioloskih organizama",
                            DifficultyLevel = "srednja skola",
                            Name = "Mikrobiologija"
                        },
                        new
                        {
                            ID = 19,
                            Description = "Osnove klasičnog jezika i njegov utjecaj na savremene jezike",
                            DifficultyLevel = "srednja skola",
                            Name = "Latinski jezik"
                        },
                        new
                        {
                            ID = 20,
                            Description = "Napredna gramatika, vokabular i konverzacija",
                            DifficultyLevel = "srednja skola",
                            Name = "Njemački jezik"
                        },
                        new
                        {
                            ID = 21,
                            Description = "Analiza tekstova, napredno pisanje i komunikacija",
                            DifficultyLevel = "srednja skola",
                            Name = "Francuski jezik"
                        },
                        new
                        {
                            ID = 23,
                            Description = "Osnovni koncepti bioloških nauka, ekologija, anatomija i evolucija",
                            DifficultyLevel = "srednja skola",
                            Name = "Biologija"
                        },
                        new
                        {
                            ID = 24,
                            Description = "Istraživanje naprednih principa u fizici i njihovih primjena",
                            DifficultyLevel = "srednja skola",
                            Name = "Fizika"
                        },
                        new
                        {
                            ID = 25,
                            Description = "Napredni koncepti hemije i njihova primjena",
                            DifficultyLevel = "srednja skola",
                            Name = "Hemija"
                        },
                        new
                        {
                            ID = 26,
                            Description = "Razumijevanje računarskih sistema, programiranja i tehnologije",
                            DifficultyLevel = "srednja skola",
                            Name = "Informatika"
                        },
                        new
                        {
                            ID = 27,
                            Description = "Napredne tehnike i metode u matematici (trigonometrija, analitička geometrija)",
                            DifficultyLevel = "srednja skola",
                            Name = "Matematika"
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.SubjectCategory", b =>
                {
                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("SubjectID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("SubjectsCategories");

                    b.HasData(
                        new
                        {
                            SubjectID = 1,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 1,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 2,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 2,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 2,
                            CategoryID = 27
                        },
                        new
                        {
                            SubjectID = 3,
                            CategoryID = 5
                        },
                        new
                        {
                            SubjectID = 3,
                            CategoryID = 6
                        },
                        new
                        {
                            SubjectID = 3,
                            CategoryID = 7
                        },
                        new
                        {
                            SubjectID = 3,
                            CategoryID = 22
                        },
                        new
                        {
                            SubjectID = 5,
                            CategoryID = 23
                        },
                        new
                        {
                            SubjectID = 5,
                            CategoryID = 24
                        },
                        new
                        {
                            SubjectID = 5,
                            CategoryID = 25
                        },
                        new
                        {
                            SubjectID = 7,
                            CategoryID = 1
                        },
                        new
                        {
                            SubjectID = 7,
                            CategoryID = 2
                        },
                        new
                        {
                            SubjectID = 12,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 12,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 12,
                            CategoryID = 27
                        },
                        new
                        {
                            SubjectID = 13,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 13,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 13,
                            CategoryID = 27
                        },
                        new
                        {
                            SubjectID = 14,
                            CategoryID = 21
                        },
                        new
                        {
                            SubjectID = 14,
                            CategoryID = 22
                        },
                        new
                        {
                            SubjectID = 15,
                            CategoryID = 12
                        },
                        new
                        {
                            SubjectID = 15,
                            CategoryID = 13
                        },
                        new
                        {
                            SubjectID = 17,
                            CategoryID = 14
                        },
                        new
                        {
                            SubjectID = 17,
                            CategoryID = 15
                        },
                        new
                        {
                            SubjectID = 17,
                            CategoryID = 16
                        },
                        new
                        {
                            SubjectID = 19,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 19,
                            CategoryID = 19
                        },
                        new
                        {
                            SubjectID = 19,
                            CategoryID = 20
                        },
                        new
                        {
                            SubjectID = 20,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 20,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 20,
                            CategoryID = 27
                        },
                        new
                        {
                            SubjectID = 21,
                            CategoryID = 3
                        },
                        new
                        {
                            SubjectID = 21,
                            CategoryID = 4
                        },
                        new
                        {
                            SubjectID = 21,
                            CategoryID = 27
                        },
                        new
                        {
                            SubjectID = 24,
                            CategoryID = 5
                        },
                        new
                        {
                            SubjectID = 24,
                            CategoryID = 6
                        },
                        new
                        {
                            SubjectID = 24,
                            CategoryID = 7
                        },
                        new
                        {
                            SubjectID = 24,
                            CategoryID = 21
                        },
                        new
                        {
                            SubjectID = 24,
                            CategoryID = 22
                        },
                        new
                        {
                            SubjectID = 25,
                            CategoryID = 23
                        },
                        new
                        {
                            SubjectID = 25,
                            CategoryID = 24
                        },
                        new
                        {
                            SubjectID = 25,
                            CategoryID = 25
                        },
                        new
                        {
                            SubjectID = 26,
                            CategoryID = 8
                        },
                        new
                        {
                            SubjectID = 26,
                            CategoryID = 9
                        },
                        new
                        {
                            SubjectID = 26,
                            CategoryID = 10
                        },
                        new
                        {
                            SubjectID = 26,
                            CategoryID = 11
                        },
                        new
                        {
                            SubjectID = 26,
                            CategoryID = 26
                        },
                        new
                        {
                            SubjectID = 27,
                            CategoryID = 1
                        },
                        new
                        {
                            SubjectID = 27,
                            CategoryID = 2
                        },
                        new
                        {
                            SubjectID = 27,
                            CategoryID = 17
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Tutor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourlyRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsLiveAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MyAppUserID")
                        .HasColumnType("int");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MyAppUserID")
                        .IsUnique();

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Availability = "Radnim danima od 17:00 do 20:00",
                            HourlyRate = "25KM/h",
                            MyAppUserID = 2,
                            Policy = "Potrebno otkazati 24 sata ranije",
                            Qualifications = "Profesor matematike",
                            Rating = 0.0,
                            YearsOfExperience = 10
                        },
                        new
                        {
                            ID = 2,
                            Availability = "Vikendom od 14:00 - 18:00",
                            HourlyRate = "30KM/h",
                            MyAppUserID = 3,
                            Policy = "Otkazivanje u roku od 48 sati",
                            Qualifications = "Magistar Engleskog jezika",
                            Rating = 0.0,
                            YearsOfExperience = 4
                        },
                        new
                        {
                            ID = 3,
                            Availability = "Ponedjeljak - Srijeda od 16:00 do 19:00",
                            HourlyRate = "28KM/h",
                            MyAppUserID = 4,
                            Policy = "Bez otkazivanja u istom danu",
                            Qualifications = "Diplomirani fizičar",
                            Rating = 0.0,
                            YearsOfExperience = 7
                        },
                        new
                        {
                            ID = 4,
                            Availability = "Radnim danima poslije 18:00",
                            HourlyRate = "35KM/h",
                            MyAppUserID = 5,
                            Policy = "Otkazivanje najkasnije 24h ranije",
                            Qualifications = "Profesorica hemije",
                            Rating = 0.0,
                            YearsOfExperience = 12
                        },
                        new
                        {
                            ID = 5,
                            Availability = "Subotom i nedjeljom 09:00-14:00",
                            HourlyRate = "32KM/h",
                            MyAppUserID = 6,
                            Policy = "Mogućnost pomjeranja termina",
                            Qualifications = "Master informatike",
                            Rating = 0.0,
                            YearsOfExperience = 6
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.TutorSubject", b =>
                {
                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("TutorID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("TutorsSubjects");

                    b.HasData(
                        new
                        {
                            TutorID = 1,
                            SubjectID = 1
                        },
                        new
                        {
                            TutorID = 1,
                            SubjectID = 10
                        },
                        new
                        {
                            TutorID = 1,
                            SubjectID = 11
                        },
                        new
                        {
                            TutorID = 2,
                            SubjectID = 2
                        },
                        new
                        {
                            TutorID = 2,
                            SubjectID = 4
                        },
                        new
                        {
                            TutorID = 2,
                            SubjectID = 21
                        },
                        new
                        {
                            TutorID = 3,
                            SubjectID = 7
                        },
                        new
                        {
                            TutorID = 3,
                            SubjectID = 17
                        },
                        new
                        {
                            TutorID = 3,
                            SubjectID = 18
                        },
                        new
                        {
                            TutorID = 4,
                            SubjectID = 9
                        },
                        new
                        {
                            TutorID = 4,
                            SubjectID = 12
                        },
                        new
                        {
                            TutorID = 4,
                            SubjectID = 13
                        },
                        new
                        {
                            TutorID = 5,
                            SubjectID = 3
                        },
                        new
                        {
                            TutorID = 5,
                            SubjectID = 6
                        },
                        new
                        {
                            TutorID = 5,
                            SubjectID = 5
                        });
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Admin", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "MyAppUser")
                        .WithMany()
                        .HasForeignKey("MyAppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyAppUser");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Attendances")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", "Student")
                        .WithMany("Lessons")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Models.Auth.Message", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Models.TutorSubjectCategory", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RS1_2024_2025.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.MyAppUser", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.MyAuthenticationToken", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "MyAppUser")
                        .WithMany()
                        .HasForeignKey("MyAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyAppUser");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Lesson", "Lesson")
                        .WithOne("Reservation")
                        .HasForeignKey("RS1_2024_2025.Domain.Entities.Reservation", "LessonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", "Student")
                        .WithMany("Reservations")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", "Tutor")
                        .WithMany("Reservations")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.ReservationPayment", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Lesson", null)
                        .WithMany("ReservationsPayment")
                        .HasForeignKey("LessonID");

                    b.HasOne("RS1_2024_2025.Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservationPayments")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", null)
                        .WithMany("ReservationsPayment")
                        .HasForeignKey("StudentID");

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", null)
                        .WithMany("ReservationsPayment")
                        .HasForeignKey("TutorID");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Review", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", "Tutor")
                        .WithMany("Reviews")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Student", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "MyAppUser")
                        .WithMany()
                        .HasForeignKey("MyAppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyAppUser");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.StudentSubject", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.SubjectCategory", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Category", "Category")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Tutor", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.MyAppUser", "MyAppUser")
                        .WithOne()
                        .HasForeignKey("RS1_2024_2025.Domain.Entities.Tutor", "MyAppUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MyAppUser");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.TutorSubject", b =>
                {
                    b.HasOne("RS1_2024_2025.Domain.Entities.Subject", "Subject")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_2025.Domain.Entities.Tutor", "Tutor")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubjectCategories");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Reservation")
                        .IsRequired();

                    b.Navigation("ReservationsPayment");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.MyAppUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationPayments");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Lessons");

                    b.Navigation("Reservations");

                    b.Navigation("ReservationsPayment");

                    b.Navigation("Reviews");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Subject", b =>
                {
                    b.Navigation("StudentSubjects");

                    b.Navigation("SubjectCategories");

                    b.Navigation("TutorSubjects");
                });

            modelBuilder.Entity("RS1_2024_2025.Domain.Entities.Tutor", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ReservationsPayment");

                    b.Navigation("Reviews");

                    b.Navigation("TutorSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
